#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans helvet
\font_typewriter default
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
\noindent
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\noindent
Projektübersicht
\end_layout

\begin_layout Subsection
\noindent
Einleitung
\end_layout

\begin_layout Subsubsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Im Rahmen des 4.
 Semesters war es Aufgabe, ein Projekt über die Dauer des Semesters anzufertigen.
 Ziel des Projektes war die Erstellung eines 
\shape italic
Routenplaner
\shape default
s mit Hilfe des Kartenmaterials von 
\shape italic
OpenStreetMap
\shape default
.
 Die zu entwickelnde Software soll das Planen von Routen innerhalb von Deutschla
nd ermöglichen.
 Zu Beginn des Projekts einigten wir uns einstimmig auf den Projektnamen
 HTWmaps.
 Diese Dokumentation umfasst das Vorgehen im Projekt.
\end_layout

\begin_layout Subsubsection
\noindent
Projektteam
\end_layout

\begin_layout Standard
\noindent
Das Projektteam, unter der Betreuung von Prof.
 Dr.
 Thomas Kretschmer umfasst 8 Mitglieder.
 Die folgende Liste zeigt die Mitarbeiter, die am Projekt teilgenommen haben:
\end_layout

\begin_layout Itemize
\noindent
Altmeyer, Thomas 
\end_layout

\begin_layout Itemize
\noindent
Bartsch, Tim 
\end_layout

\begin_layout Itemize
\noindent
Gökkaya, Volkan
\end_layout

\begin_layout Itemize
\noindent
Klos, Yassir 
\end_layout

\begin_layout Itemize
\noindent
Lana, Tobias 
\end_layout

\begin_layout Itemize
\noindent
Rech, Christian 
\end_layout

\begin_layout Itemize
\noindent
Schneider, Lucian 
\end_layout

\begin_layout Itemize
\noindent
Tartakowski, Stanislaw 
\end_layout

\begin_layout Standard
\noindent
Das Projekt wurde von Christian Rech geleitet.
 
\end_layout

\begin_layout Subsubsection
\noindent
Zielsetzung
\end_layout

\begin_layout Standard
\noindent
Ziel des Projektes war die Fertigstellung der Software, sowie eine umfassende
 Dokumentation dieser, bis zum 30.
 September 2010.
 Das Programm sollte bis dahin den im 
\shape italic
Lastenheft
\shape default
 definierten Funktionsumfang besitzen.
 
\end_layout

\begin_layout Subsubsection
\noindent
Zielgruppe
\end_layout

\begin_layout Standard
\noindent
HTWmaps gleicht im Aufbau anderen Online-
\shape italic
Routenplaner
\shape default
n (z.B.
 
\color black
GoogleMaps, Falk24, ViaMichelin)
\color inherit
.
 Es wurde versucht, soweit technisch und zeitlich möglich, die besten Funktionen
 dieser 
\shape italic
Routenplaner
\shape default
\color black
 in HTWmaps einzubauen.
 Die Zielgruppe, größtenteils Autofahrer, unterscheidet sich deswegen nicht
 von anderen 
\shape italic
Routenplaner
\shape default
n.
\end_layout

\begin_layout Subsection
\noindent
Hinweis auf Glossar
\end_layout

\begin_layout Standard
\noindent
In der Dokumentation „kursiv“ geschriebene Begriffe und wichtige Begriffe
 die in Grafiken auftreten werden im Kapitel -Glossar- erklärt.
 
\end_layout

\begin_layout Subsection
\noindent
Vorgehenweise
\end_layout

\begin_layout Subsubsection
\noindent
Vorgehensmodell Scrum (oder Code & Fix)
\end_layout

\begin_layout Standard
\noindent
Die Projektgruppe hat sich für das agile 
\shape italic
Vorgehensmodell
\shape default
 
\shape italic
Scrum
\shape default
 entschieden.
 
\shape italic
Scrum
\shape default
 beruht auf dem Prinzip, dass die Teammitglieder sich weitgehend selbst
 organisieren.
 Es wird stetig darüber abgestimmt, ob Funktionen wichtig sind und implementiert
 werden, oder ob es wichtigere Funktionen gibt, auf welche man sich konzentriert.
 Die Projektteilnehmer hielten jede Woche Meetings ab, in denen über neue
 Erkenntnisse berichtet und zusammen weitergearbeitet wurde.
 Hierdurch konnte der noch zu erbringende Arbeitsaufwand grob abgeschätzt
 werden.
 Weiterhin haben sich die Projektteilnehmer auch außerhalb der regelmäßigen
 Meetings getroffen, um zusammen aktuelle Schwierigkeiten zu besprechen
 und zu bewältigen.
 
\end_layout

\begin_layout Standard
\noindent
Andere Modelle, wie beispielsweise das 
\shape italic
Wasserfallmodell
\shape default
, erschienen zu unflexibel für die Aufgabenstellung.
 Obwohl das Projekt von Anfang bis Ende geplant wurde und das Vorgehen festgeleg
t wurde, stellte sich häufiger heraus, dass (meist aus Performance Gründen)
 das Vorgehen verändert werden musste.
 Dies traf größtenteils auf den Datenbankbereich zu, wodurch wiederum auch
 andere Teile überarbeitet werden mussten.
 Dies glich deshalb dem Vorgehensmodell 
\shape italic
Code & Fix
\shape default
.
 
\end_layout

\begin_layout Subsubsection
\noindent
Gruppeneinteilung
\end_layout

\begin_layout Standard
\noindent
Das Finden von Modulen und deren Abgrenzung auf abstrakter Ebene funktionierte
 auf Anhieb.
 Zu Beginn wurde geklärt, welche Aufgaben grob vollzogen werden mussten.
 Hier wurden kleine Arbeitsgruppen gebildet.
 Die Gruppeneinteilung war jedoch keine leichte Aufgabe.
 Problematisch war, dass bis dato keiner der Teilnehmer den Realisierungsaufwand
 der einzelnen Module abschätzen konnte.
 Man hat folglich darauf verzichtet Verantwortungsbereiche klar voneinander
 zu trennen.
 Jedoch haben sich über die Projektphase hinweg Gruppen herauskristallisiert,
 da einige ein besonders großes Maß an Arbeit in ihre Aufgabe investierten
 und dementsprechend sich in ihrem Bereich sicher fühlten.
 Im Gesamtblick ergaben sich folgende Gruppen: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bereich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Personen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Algorithmen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Volkan Gökkaya, Lucian Schneider, Christian Rech
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datenbanken
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yassir Klos, Tobias Lana
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thomas Altmeyer, Tim Bartsch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Routingalgorithmen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stanislav Tartakowski, Tim Bartsch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Serververwaltung
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Christian Rech, Lucian Schneider
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Die Tabelle zeigt nur Tätigkeiten, die sich über einen längeren Zeitraum
 erstreckten.
 Jedes Teammitglied hat auch in anderen Aufgabenbereichen mitgearbeitet.
\end_layout

\begin_layout Subsection
\noindent
Produktumfang
\end_layout

\begin_layout Standard
\noindent
Da es bereits einige 
\shape italic
Routenplaner
\shape default
 gibt, konnte sich jeder Projektteilnehmer sehr gut vorstellen, was in dem
 Projekt verlangt wurde.
 So kam es auch dazu, dass wir unser Programm mit anderen 
\shape italic
Routenplaner
\shape default
n verglichen haben.
 Da die am meisten genutzen 
\shape italic
Routenplaner
\shape default
 vom Internet aus zu bedienen sind, haben wir uns dies auch als Ziel gesetzt.
\end_layout

\begin_layout Standard
\noindent
Die Funktionen wurden im 
\shape italic
Lastenheft
\shape default
 festgehalten und können dort nachgelesen werden.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\noindent
Allgemeines
\end_layout

\begin_layout Subsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Sie erreichen die Web-Anwendung unter folgender URL: 
\color blue
www.HTWmaps.de
\color inherit
.
 Getestet wurde die Anwendung von uns unter den aktuellen Versionen von
 Mozilla Firefox und Google Chrome.
\end_layout

\begin_layout Subsection
\noindent
Projektabgrenzung
\end_layout

\begin_layout Standard
\noindent
HTWmaps beinhaltet nur das Kartenmaterial von Deutschland.
 Die zu erstellende Software bietet nicht alle Möglichkeiten und Optionen,
 die technisch machbar gewesen wären.
 Aufgrund der zeitlichen Beschränkung mussten wir auf folgende Features
 verzichten: 
\end_layout

\begin_layout Itemize
\noindent
Fußgänger- und Fahrradfahrerrouten 
\end_layout

\begin_layout Itemize
\noindent
Postleitzahlen 
\end_layout

\begin_layout Itemize
\noindent
Points of Interest (POI)
\end_layout

\begin_layout Itemize
\noindent
Drucken der Routen
\end_layout

\begin_layout Subsection
\noindent
Programmiersprache 
\end_layout

\begin_layout Standard
\noindent
Der Code wurde überwiegend in Java geschrieben.
 Wegen der Verwendung von 
\shape italic
GWT
\shape default
 mussten einige Schnittstellen in 
\shape italic
JavaScript
\shape default
 implementiert werden.
 Ansonsten wurde noch HTML und CSS verwendet um die Oberfläche graphisch
 aufzuarbeiten.
\end_layout

\begin_layout Subsection
\noindent
Wie sind die Daten aufbereitet
\end_layout

\begin_layout Standard
\noindent

\shape italic
OpenStreetMap
\shape default
 bietet die Daten als xml formatierte Datei zum Download an.
 Die Datei hat folgende Struktur:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/xmlstruktur.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Die von uns benutzte germany.osm Datei, mit Beschränkung auf Deutschland,
 enthällt alle Knoten, Wege, Beziehungen und Änderungssätze der Datenbank.
 Diese Datei ist gepackt 803MB groß (Stand: 02.09.2010).
\end_layout

\begin_layout Subsection
\noindent
Vorbereitende Tätigkeiten
\end_layout

\begin_layout Subsubsection
\noindent
Versionsverwaltung und Projekthosting
\end_layout

\begin_layout Standard
\noindent
Eine Versionsverwaltung war notwendig, um mit dem ganzen Projektteam gleichzeiti
g am Code arbeiten zu können.
 Außerdem bietet eine Versionsverwaltung die Möglichkeit das Projekt auf
 einen früheren Status zurückzusetzen und somit eventuelle Fehler zu beseitigen.
 Wir kamen sehr schnell auf die Idee, hierfür einen geeigneten Projekthoster
 zu benutzen, um uns so einiges an Verwaltungsaufwand zu sparen.
\end_layout

\begin_layout Standard
\noindent
In der näheren Auswahl standen die Projekthoster 
\shape italic
Sourceforge
\shape default
 und 
\shape italic
Github
\shape default
.
 Bei der Versionsverwaltung Apache Subversion und Git.
 Die Seite des Projekthosters 
\shape italic
Github
\shape default
 ist intuitiv und einfach zu bedienen, sie bietet deshalb auch nur eine
 eingeschränkte Auswahl an Funktionen, aber dennoch alle Funktionen die
 wir für unser Projekt benötigten.
 
\shape italic
Sourceforge
\shape default
 hat dagegen sehr viele Funktionen, ist jedoch aufwändig einzurichten und
 zu verwalten.
 Somit haben wir 
\shape italic
Github
\shape default
 als Projekthoster gewählt.
 
\shape italic
Github
\shape default
 bietet auch noch einen weiteren Vorteil: Mit 
\shape italic
Github
\shape default
 ist es möglich das Projekt über HTTP zu verwalten.
 Bei einem Versuch, Git innerhalb der HTW über SSH zu verwenden, scheiterten
 wir an der Firewall der HTW.
\end_layout

\begin_layout Standard
\noindent
Subversion ist weit verbreitet und wurde auch schon von einigen Projektteilnehme
rn benutzt.
 Trotzdem entschieden wir uns für Git, da es nicht wie Subversion, einen
 serverorientierten Ansatz verfolgt, sondern die meisten Aktionen lokal
 ausgeführt werden.
 Dies bietet erstens einen Geschwindigkeitsvorteil und zweitens hat jeder
 Projektteilnehmer eine komplette Kopie der gesamten History gespeichert,
 was bei möglichen Ausfällen des Projekthosters von Vorteil ist.
\end_layout

\begin_layout Standard
\noindent
Plugins, um Git zu bedienen (für unsere Entwicklungsumgebung (IDE)), erschienen
 uns noch zu unausgereift und besaßen noch viele Fehler.
 Deswegen entschieden wir uns, Git über die Konsole zu bedienen.
 Hierfür organisierten wir eine interne Schulung und zeigten, wie die Versionier
ung funktioniert.
 Außerdem wurde ein Wiki angelegt, in dem die besprochenen Funktionen erklärt
 werden.
 
\end_layout

\begin_layout Subsubsection
\noindent
GWT
\end_layout

\begin_layout Standard
\noindent
Das Google Web Toolkit (GWT) ist ein 
\shape italic
Framework
\shape default
 zur Entwicklung von Webanwendungen der Firma Google.
 
\shape italic
GWT
\shape default
 ist eine freie Software veröffentlicht unter der Apache-Lizenz.
 Sie besitzt einen Java-nach-
\shape italic
Javascript
\shape default
-Compiler, wodurch Anwendungen komplett mit 
\shape italic
Java
\shape default
 implementiert werden und durch den Compiler in 
\shape italic
Javascript
\shape default
 übersetzt werden.
 
\shape italic
GWT
\shape default
 unterstützt auch Remote Procedure Calls (RPC), mit diesen Aufrufen können
 von einem 
\shape italic
Client
\shape default
 Methoden auf einem Server aufgerufen werden.
 Mit Hilfe dieser RPCs konnten wir den 
\shape italic
Routeplaner
\shape default
 so aufbauen, dass die graphische Darstellung auf dem 
\shape italic
Client
\shape default
 ausgeführt wird und die eigendliche Routenberechnung auf dem Server läuft.
\end_layout

\begin_layout Standard
\noindent
Zu Beginn des Projektes hatte niemand in unserer Gruppe Erfahrungen mit
 
\shape italic
GWT
\shape default
.
 Bevor wir uns für 
\shape italic
GWT
\shape default
 entschieden haben, hatten wir uns auch über JSP und Servlets informiert.
 Diese Sprachen erschienen uns aber wesentlich komplexer.
 Da 
\shape italic
GWT
\shape default
 ähnlich wie Java Swing funktioniert, konnten wir uns schnell einarbeiten.
 Es wird von Google ein Tutorial angeboten, um das Bedienen von 
\shape italic
GWT
\shape default
 zu erlernen, welches die Verantwortlichen auch durchgearbeitet haben.
\end_layout

\begin_layout Subsubsection
\noindent
Server
\end_layout

\begin_layout Standard
\noindent
Da wir uns dafür entschieden haben, eine Web-Anwendung zu entwickeln, benötigten
 wir auch einen Server dafür.
 Zu Beginn importierten wir unsere Datenbank in MySQL bei einem kleinen
 Web-Hoster.
 Hier waren die Ressourcen aber sehr begrenzt und dies konnte nur eine Zwischenl
ösung sein.
 Also installierten wir uns einen Server, welcher dann bei einem Projektmitglied
 am privaten Internet angeschlossen werden sollte.
 Parallel fragten wir aber auch an der HTW nach, ob es hier nicht die Möglichkei
t gibt einen Server bzw.
 eine Virtuelle Maschine (VM) für unser Projekt zu bekommen.
 So wurde uns von der Fachschaft Informatik eine Virtuelle Maschine auf
 dem 
\begin_inset Quotes eld
\end_inset

Studwork
\begin_inset Quotes erd
\end_inset

 Server eingerichtet.
 Hiermit möchten wir uns auch wieder recht herzlich dafür bedanken.
 Die VM musste während des Projektes auch immer wieder erweitert werden.
 So haben wir um einen zweiten Prozessor gebeten, um Threads besser ausnutzen
 zu können.
 Um die Performance zu steigern, wurde der RAM auf 2 GB erweitert.
 Außerdem wurde die Festplatte von 10 GB auf 20 GB erweitert.
 Dies ist bei einer VM mit ein paar Befehlen eingerichtet.
\end_layout

\begin_layout Standard
\noindent
Als der Server stand, musste dieser auch noch eingerichtet werden.
 Wir entschieden uns dafür Ubuntu Server als Betriebssystem zu installieren.
 Als nächstes mussten noch einige für das Projekt benötigte Dienste (Deamons)
 eingerichtet werden.
\end_layout

\begin_layout Standard
\noindent
Diese waren:
\end_layout

\begin_layout Itemize
\noindent
SSH - sichere Verbindung zur VM
\end_layout

\begin_layout Itemize
\noindent
MySQL - als Datenbankserver
\end_layout

\begin_layout Itemize
\noindent
PHPmyAdmin - Konfiguration MySQL Server
\end_layout

\begin_layout Itemize
\noindent
Apache - als Webserver
\end_layout

\begin_layout Itemize
\noindent
Git - Versionsverwaltung des Projektes
\end_layout

\begin_layout Itemize
\noindent
JRE - Java Programme lokal ausführen
\end_layout

\begin_layout Standard
\noindent
Außer der Installation mussten auch noch einige Konfigurationen gemacht
 werden.
 So wurden auch Start- und Stopskripte erstellt.
 Außerdem wurde an den Einstellungen von MySQL und Apache gearbeitet um
 eine maximale Performance zu erreichen.
\end_layout

\begin_layout Subsection
\noindent
Unvollständigkeit der Daten
\end_layout

\begin_layout Standard
\noindent
Die Daten bei Openstreet Maps sind derzeit noch unvollständig.
 So sind manchmal Wege und Straßen nicht verzeichnet, oder besitzen ungültige
 Namen, wie beispielsweise „unbekannt“.
 Folgende Unvollständigkeit der Daten, welche teilweise Auswirkungen auf
 die Routenplanung haben, wurden im Laufe des Projektes von uns festgestellt:
\end_layout

\begin_layout Itemize
\noindent
Viele Straßen sind nicht verzeichnet, oder besitzen ungültige Namen 
\end_layout

\begin_layout Itemize
\noindent
Postleitzahlen und Hausnummern sind fast nirgendwo erfasst 
\end_layout

\begin_layout Itemize
\noindent
Straßen sind fast nie mit einem Ort gekennzeichnet in dem sie liegen
\end_layout

\begin_layout Itemize
\noindent
Häufige Rechtschreibfehler der Orte/Straßen 
\end_layout

\begin_layout Itemize
\noindent
Manche Orte haben keinen Straßennamen 
\end_layout

\begin_layout Itemize
\noindent
Orte sind selten klar voneinander getrennt (Keine Grenzen) 
\end_layout

\begin_layout Itemize
\noindent
Viele Orte, vor allem Dörfer sind vom falschen Typ (Hamlet, Village).
 So variiert die Größe eines Dorfes stark, jedoch haben viele Dörfer unterschied
licher Größe im Kartenmaterial die gleiche Beschreibung.
 Ein kleines Dorf muss als „Hamlet“ beschrieben werden, ab ca.
 2km Durchmesser schon „Village“ 
\end_layout

\begin_layout Itemize
\noindent
Es gibt Orte, zu denen keine Straße führt, hierhin findet der Algorithmus
 natürlich auch keinen Weg.
\end_layout

\begin_layout Itemize
\noindent
Viele Straßen sind keinem Ort zugeordnet.
 Der Benutzer muss aber in der Lage sein, eine Straße und einen Ort anzugeben,
 um dem Programm mitzuteilen, wohin und von wo er routen will.
 Dieses Problem wurde von uns nur teilweise gelöst.
 Um jeden Ort, abhängig vom Typ, wie Dorf, Stadt, etc., wurde jeweils ein
 Kreis bestimmten Radius gezogen, der alle beinhalteten Straßen mit dem
 jeweiligen Ort kennzeichnet.
 Manche Orte sind jedoch exakt vermerkt, sodass man jede Straße mit einem
 anderen Verfahren („Punkt in Polygon“) kennzeichnen konnte.
 Allerdings sind diese Orte eher selten.
 
\end_layout

\begin_layout Standard
\noindent
Letztlich gibt es über den Datenbestand in der Datenbank folgendes zu sagen:
 
\end_layout

\begin_layout Itemize
\noindent
Nicht alle Straßen konnten mit einem Kreis um den Ort erfolgreich einem
 Ort zugewiesen werden (zu kleiner Radius, Ort ist nicht kreisrund)
\end_layout

\begin_layout Itemize
\noindent
Es gibt „Übergriffe“ der Kreise auf benachbarte Orte, sodass dann Straßen
 zum falschen Ort zugeteilt werden 
\end_layout

\begin_layout Itemize
\noindent
Straßen in Orten, die als solche exakt gekennzeichnet sind (Polygone), sind
 alle vermerkt.
 
\end_layout

\begin_layout Standard
\noindent
Anzahl der Daten, die effektiv der Datenbank entnommen werden können:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bereich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anzahl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Städte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43545
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Straßen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1251450
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/unvollst_Daten.png
	lyxscale 60
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Mit blauen Kreisen sind Dörfer, mit lila Kreisen Unterorte und mit roten
 Umrissen exakte Polygone gekennzeichnet.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\noindent
Lastenheft
\end_layout

\begin_layout Subsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Das komplette 
\shape italic
Lastenheft
\shape default
 mit den unterstützten Funktionen und Anforderungen finden Sie im Anhang.
 Im nächsten Unterpunkt möchten wir Ihnen aber einen Überblick über die
 Funktionen geben.
\end_layout

\begin_layout Subsection
\noindent
Beschreibung der Funktionen
\end_layout

\begin_layout Description
\noindent
Festlegen 
\series bold
des Startpunktes:
\series default
 Der Benutzer wählt seinen Startpunkt aus, indem er eine Startadresse im
 Programm eingibt.
\end_layout

\begin_layout Description
\noindent
Optionales 
\series bold
Auswählen von Zwischenstopps
\series default
: Falls Zwischenstopps erwünscht sind, kann der Benutzer diese im Programm
 eingeben.
\end_layout

\begin_layout Description
\noindent
Festlegen 
\series bold
des Zielpunktes:
\series default
 Der Benutzer wählt einen Zielpunkt aus, indem er eine Zieladresse im Programm
 eingibt.
 Auswahlmöglichkeit sind kürzeste- und schnellste Route.
 Dem Benutzer soll es möglich sein auszuwählen, ob die kürzeste Route oder
 die schnellste Route berechnet werden soll.
\end_layout

\begin_layout Description
\noindent
Eingeben 
\series bold
der Durchschnittsgeschwindigkeit:
\series default
 Die zur Berechnung notwendigen Durchschnittsgeschwindigkeiten können vom
 Benutzer für die verschiendenen Verkehrswege angepasst werden.
\end_layout

\begin_layout Description
\noindent
Berechnen 
\series bold
der Route
\series default
: Die Eingabedaten werden verarbeitet und die entsprechende Route wird berechnet.
\end_layout

\begin_layout Description
\noindent
Ausgabe 
\series bold
der Route:
\series default
 Der Benutzer erhält eine schriftliche Wegbeschreibung und die dazugehörige
 grafische Darstellung der Route auf einer Karte.
\end_layout

\begin_layout Description
\noindent
Eingabe: Die Eingabe der Startadresse, Zieladresse und der Zwischenstopps
 erfolgt mit Ortsname und Straßenname.
 Hausnummern und Postleitzahl werden nicht berücksichtigt.
 
\end_layout

\begin_layout Subsection
\noindent
Produktleistung
\end_layout

\begin_layout Standard
\noindent
\begin_inset Quotes eld
\end_inset

/LL 10/ Das Berechnen der Route muss unter 3 Sekunden liegen.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\noindent
Im Lastenheft formulierten wir das Ziel eine Route unter 3 Sekunden zu berechnen.
 Um dieses Ziel zu erreichen wurde sehr viel Zeit investiert.
 Leider war es uns nicht möglich diese Vorgabe immer einzuhalten.
 Es ist uns aber gelungen eine nahe dranliegendes Ergebnis zu erreichen.
 Als das Lastenheft erstellt wurde, hatten wir noch wenig Erfahrung was
 auf uns zukommt.
 Wir haben uns hier wohl zu sehr an die Routenberechnungszeiten von großen
 Unternehmen wie z.B.
 Google Maps gerichtet.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\noindent
Technische Dokumentation
\end_layout

\begin_layout Subsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Der folgende Abschnitt erläutert den Aufbau von HTWmaps.
 Sie geht auf das zugrunde liegende Konzept der Implementierung und des
 Aufbaus der Datenbank ein.
 
\end_layout

\begin_layout Subsection
\noindent
Gesamtes UML
\end_layout

\begin_layout Subsubsection
\noindent
Klassen und Pakete
\end_layout

\begin_layout Paragraph
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Dieser Abschnitt dient dazu, Ihnen einen Überblick über die Paketstruktur
 des Projektes zu geben.
 Es handelt sich hier um eine abstrakte Ansicht der wichtigsten Klassen
 und Methoden.
\end_layout

\begin_layout Paragraph
\noindent
Aufbau GWT
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Bei dem Anlegen eines 
\shape italic
GWT
\shape default
 Projektes wird noch zusätzlich eine Grundstruktur an Paketen angelegt.
 Diese Pakete heißen: 
\end_layout

\begin_layout Itemize
\noindent

\shape italic
Client
\shape default
 - Der Code in diesem Ordner wird in 
\shape italic
JavaScript
\shape default
 übersetzt und auf dem 
\shape italic
Client
\shape default
 im Browser ausgeführt 
\end_layout

\begin_layout Itemize
\noindent
Shared - Hier wird Code gelagert der vom 
\shape italic
Client
\shape default
 und vom Server ausgeführt werden kann
\end_layout

\begin_layout Itemize
\noindent
Server - Dieser Java Code wird in der Java Laufzeitumgebung auf dem Server
 ausgeführt
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/htwmaps_pakete.png
	display false
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
In den einzelnen Paketen befindet sich eine von uns selbst angelegte Paket-Struk
tur, um unseren Quellcode zu organisieren.
\end_layout

\begin_layout Paragraph
\noindent
Server Bereich
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
In dem Paket Server finden Sie folgende Struktur:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/htwmaps.server.png
	lyxscale 60
	display false
	scale 60

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
Client Bereich
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
In dem 
\shape italic
Client
\shape default
 Paket finden Sie folgende Struktur:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/htwmaps.client.png
	display false
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
\noindent
Allgemeiner Programmablauf
\end_layout

\begin_layout Standard
\noindent
Der Benutzer interagiert mit der Software über einen 
\shape italic
JavaScript
\shape default
 fähigen Internetbrowser.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/Ablauf_alg.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Subsection
\noindent
Datenbank
\end_layout

\begin_layout Subsubsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Zu Beginn des Projektes prüften wir verschiedene Möglichkeiten zur Datenbeschaff
ung und Datenbereitstellung.
 Die Möglichkeit direkt mit dem Kartenmaterial, welches im XML Format vorliegt,
 zu arbeiten erwies sich schnell als nicht realisierbar, da das Kartenmaterial
 ~9,3GB groß ist und somit Dateioperationen sehr langsam und eine Auslagerung
 der Daten im RAM auf Grund der Größe nicht möglich ist.
 Schnell kristalisierte sich die Verwendung einer Datenbank als beste und
 komfortabelste Lösung heraus.
\end_layout

\begin_layout Subsubsection
\noindent
Zahlen
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bereich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anzahl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Straßen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,870,958
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43,547
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Knoten
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45,125,605
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kanten
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11,695,294
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Für Für Algorithmus optimierte Kanten
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,113,686
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Für Algorithmus optimierte Knoten
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,412,902
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Konzept
\end_layout

\begin_layout Standard
\noindent
Die ersten umgesetzten Datenbankstrukturen waren sehr normalisiert und die
 Daten auf viele einzelne Tabellen verteilt.
 Bei den enormen Datenmengen von komplett Deutschland war dieser Ansatz
 allerdings so Performance zehrend, dass die Datenbank den Routingprozeß
 um ein vielfaches verlangsamte.
 Daher wurde ein neues Schema entwickelt, dieses wies zwar starke Redundanzen
 auf, war aber auch um ein vielfaches performanter.
 Da alle Daten nach dem Import nicht mehr verändert werden wurden die Redundanze
n zu Gunsten der Performance akzeptiert.
\end_layout

\begin_layout Subsubsection
\noindent
Hard- und Software 
\end_layout

\begin_layout Itemize
\noindent
Datenbanksoftware: MySQL 
\end_layout

\begin_layout Itemize
\noindent
Version: 5.1.41 
\end_layout

\begin_layout Itemize
\noindent
Betriebssystem: Ubuntu Server Version: 10.04 
\end_layout

\begin_layout Itemize
\noindent
Server: stud-i-pr2.htw-saarland.de 
\end_layout

\begin_layout Itemize
\noindent
Standort: Virtuelle Maschine auf dem Server der Fachschaft Informatik  
 
\end_layout

\begin_layout Itemize
\noindent
Hardware / Ressourcen: 2x2,8GHz; 2GB Ram; 20GB Festplatte 
\end_layout

\begin_layout Subsubsection
\noindent
Datenbankschema
\end_layout

\begin_layout Standard
\noindent
In der ersten Version des Datenbanksschemas ging man davon aus, dass zum
 
\shape italic
Rendern
\shape default
 der Route alle Daten aus der Quelldatei benötigt werden würden.
 Dazu gehörten auch die Daten, die nichts mit der direkten Routenplanung
 zu tun haben, z.B.
 Umrisse von Wäldern, Flüsse, Bundeslandgrenzen, etc.
 Daher wurden in den ersten Versionen alle Daten aus der Quelldatei in die
 Datenbank übernommen.
 In den ersten Versionen lag die Priorität des Datenbankentwurfs auf dem
 Layout, bzw.
 auf der Normalisierung der Datenbank.
 Mit dem Umstieg von Saarland nach Deutschland wurde jedoch schnell klar,
 dass die Performance sehr stark unter dem normalisierten Datenbankentwurf
 leidet.
 
\end_layout

\begin_layout Standard
\noindent
Ein neuer Ansatz brachte zwei wichtige Änderungen:
\end_layout

\begin_layout Enumerate
\noindent
Das 
\shape italic
Rendern
\shape default
 der Karte wird an eine externe Lösung abgegeben.
 Das heißt, dass nur noch die zum Routen relevanten Daten in die Datenbank
 gespeichert werden.
 
\end_layout

\begin_layout Enumerate
\noindent
Performance hat höhere Priorität als Normalisierung.
 Als Folge wurden Redundanzen in Kauf genommen, da dadurch viel Zeit, durch
 entfallene JOINS, eingespart werden konnte.
 
\end_layout

\begin_layout Standard
\noindent
Die ersten Versionen wurden ausschließlich auf Grundlage der Kartendaten
 des Saarlandes entwickelt und gefüllt.
 Erst ab Version 0.4 wurde ganz Deutschland berücksichtigt.
 
\end_layout

\begin_layout Paragraph
Entwicklung des Datenbankschemas
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/ERDiagramm_0.1.png
	display false
	width 65col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Version 0.1
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /Users/tobiaslana/Dropbox/HTWmaps-Doku-LaTeX/Images/db/ERDiagramm_0.2.png
	display false
	width 65col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Version 0.2
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /Users/tobiaslana/Dropbox/HTWmaps-Doku-LaTeX/Images/db/ERDiagramm_0.3.png
	display false
	width 65col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Version 0.3
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/ERDiagramm_0.4.png
	display false
	width 65col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Version 0.4
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/ERDiagramm_0.5.png
	display false
	width 65col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Version 0.5
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph
\noindent
Finales Datenbankschema (1.0)
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db_1.0.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph
\paragraph_spacing single
\noindent
Übersicht über die einzelnen Tabellen
\end_layout

\begin_layout Paragraph
\noindent
cities
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-1.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-2.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph
\noindent
edges_all
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-3.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-4.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Paragraph
\noindent
edges_borders
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-5.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-6.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
edges_opt
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-7.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-8.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
nodes
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-9.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-10.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
nodes_opt
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-11.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-12.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
ways
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Beschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-13.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Aufbau
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/db/db-14.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Kantenoptimierung
\end_layout

\begin_layout Standard
\noindent
Um die Performance der Wegsuche zu steigern wurde eine Kantenoptimierung
 realisiert.
 Hierbei handelt es sich um einen optimierten (schlankeren) Graphen.
 Dieser Graph unterscheidet sich vom ursprünglichen Graphen, an der Anzahl
 der Knoten und Kanten.
 In dem OSM Kartenmaterial existieren viele Knoten, die für das routen keinen
 brauchbaren Wert haben, auch wenn sich diese auf der Ergebnisstraße ist.
\end_layout

\begin_layout Standard
\noindent
Dieses Bild veranschaulicht die Beschreibung:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/kantenoptimierung.png
	lyxscale 60
	display false
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
\noindent
Algorithmen
\end_layout

\begin_layout Subsubsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
In diesem Abschnitt erhalten Sie einen Überblick über die wichtigsten Algorithme
n.
\end_layout

\begin_layout Subsubsection
\noindent
Routingalgorithmus
\end_layout

\begin_layout Standard
\noindent
Der 
\shape italic
Routenplaner
\shape default
 läuft mit 2 auswählbaren Suchalgorithmen, 
\shape italic
A*
\shape default
 und 
\shape italic
A*
\shape default
 Bidirectional, die beide unabhängig voneinander entwickelt wurden.
 Beide Algorithmen können in allen Bereichen, in denen es darum geht, von
 einem bekannten Anfangspunkt einen Weg zu einem bekannten Endpunkt zu finden,
 ihre Anwendung finden.
 Der 
\shape italic
A*
\shape default
 Algorithmus entstand aus der Idee vom 
\shape italic
Dijkstra
\shape default
 Suchalgorithmus und hat diesen erweitert.
 
\shape italic
Dijkstra
\shape default
 ist auf das Suchen des kürzesten Weges von jedem Knoten aus zum Startknoten
 konzipiert.
 Dies hat den Vorteil, dass man nicht von Vornherein wissen muss, wo sich
 das Ende befindet z.B.
 das Routen durch ein Netzwerk.
 Dieses Konzept ist für den Anwendungsfall unserer Software wenig sinnvoll,
 da wir nur den kürzesten Weg zwischen Start- und Endknoten suchen.
 
\shape italic
A*
\shape default
 erfüllt dieses Kriterium.
 Ein entscheidender Unterschied zu 
\shape italic
Dijkstra
\shape default
 ist eine zielorientierte Heuristik.
 Diese veranlasst den Algorithmus immer den nächsten Knoten zu analysieren,
 der am nächsten zum aktuellen Knoten und zum Ziel liegt.
 Trotz dieser Erweiterung bleibt der mathematische Korrektheitsbeweis analog
 zum 
\shape italic
Dijkstra
\shape default
.
 Eine Möglichkeit 
\shape italic
A*
\shape default
 zu optimieren, ist ein sogenanntes „
\shape italic
Bidirektional
\shape default
es Verfahren“.
 Der 
\shape italic
bidirektional
\shape default
e 
\shape italic
A*
\shape default
 entspricht dem klassischen 
\shape italic
A*
\shape default
, bis auf die Tatsache, dass hier der klassische 
\shape italic
A*
\shape default
 gleichzeitig von Start nach Ende, sowie von Ende nach Start sucht.
 In den Punkten, in denen sich die beiden Verfahren zum ersten Mal treffen,
 ist die Schnittstelle zum gefundenen Weg.
 Dieses Verfahren beschleunigt die Suche und ist von der Theorie her korrekt.
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Momentaufnahme
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/AStar_Bi_Momentaufnahme.png
	lyxscale 60
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Die rosa Punkte zeigen jeden Knoten der vom Algorithmus besucht wurde.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Wenn jede Kante denselben Abstand besitzt, kann man die Ausbreitung der
 Algorithmen auf dem Graphen veranschaulichen:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Dijkstra:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/dijkstra_kreis.png
	lyxscale 60
	display false
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\noindent
Dijkstra Bidirectional:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/dijkstra_2kreis.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
A*:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/aSTar.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
A* Bidirectional:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/astarBi.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Das 
\shape italic
bidirektional
\shape default
e Verfahren ist immer performanter, da weniger Knoten besucht werden.
 
\end_layout

\begin_layout Standard
\noindent
Leider ist es nicht gelungen den 
\shape italic
bidirektional
\shape default
en 
\shape italic
A*
\shape default
 deterministisch zu implementieren.
 Das Ergebnis hängt vom Thread-Scheduling der JVM ab und liefert manchmal
 unterschiedliche Ergebnisse bei unveränderter Eingabe.
 Allerdings ist der „Fehler“ nie schwerwiegend, da sich 
\shape italic
A*
\shape default
 zielorientiert auf dem Graphen ausbreitet.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\noindent
Zum besseren Verständnis des Problems dient folgende Graphik:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/thread1_thread2.png
	lyxscale 60
	display false
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Fibonacci Heap
\end_layout

\begin_layout Standard
\noindent
Entscheidend, was die Performance betrifft, ist eine optimale Datenstruktur.
 Ohne auf Details einzugehen, gibt das folgende Bild einen ausreichenden
 Eindruck:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/Fibonacci_Heap.png
	lyxscale 60
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Zur Laufzeitoptimierung, verwenden beide Algorithmen den „Fibonacci Heap“.
 Diese Datenstruktur ist prinzipiell eine sehr performante Prioritätsliste.
 Sie wurde nicht vom Projektteam implementiert, es wurde stattdessen eine
 Implementierung aus dem Buch 
\begin_inset Quotes eld
\end_inset

Introduction to Algorithms von Charles E.
 Leiserson, Thomas H.
 Cormen und Ronald L.
 Rivest
\begin_inset Quotes erd
\end_inset

 benutzt.
\end_layout

\begin_layout Subsubsection
\noindent
Selektierung der Knoten und Kanten aus der Datenbank
\end_layout

\begin_layout Standard
\noindent
Anfangs wurden immer alle Kanten und Knoten aus der Datenbank geladen, um
 daraus einen Graphen zu bauen, in dem der Algorithmus den kürzesten Weg
 suchen kann.
 In unserer Datenbank befand sich zu dieser Zeit nur das Straßennetz des
 Saarlandes.
 Doch auch bei diesen wenigen Daten konnten wir mit einer Selektierung der
 Knoten und Kanten einen Geschwindigkeitsgewinn erreichen.
 Unsere erste Idee war es nur Knoten und Kanten zu berücksichtigen, die
 sich in einem zur x-Achse parallelem Rechteck befinden.
 Ob sich ein Punkt, hier also ein Knoten bzw eine Kante, in einem zur x-Achse
 Parallelen Rechteck befindet, lässt sich mit wenigen einfachen Vergleichen
 herausfinden.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/selekts/rechteckSelekt1.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
Allerdings können eine ungünstige Position des Start- oder Endpunktes das
 Rechteck so verschmälern, dass mit den selektierten Kanten und Knoten keine
 Verbindung mehr zwischen den beiden Punkten gefunden werden kann.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/selekts/rechteckSelekt2.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
Um diese Probleme zu umgehen, hatten wir die Idee eines Parabelselekts.
 Hierbei werden über den Start- und Endpunkt zwei Parabeln gelegt.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/selekts/parabelSelekt1.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\noindent
Allerdings entstehen hier sehr ähnliche Probleme.
 Wie bei der ursprünglichen Idee des Rechecks, werden oft zu wenige Knoten
 und Kanten selektiert.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/selekts/parabelSelekt2.png
	display false
	scale 40

\end_inset


\begin_inset Graphics
	filename Images/selekts/parabelSelekt3.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
Dieses Problem konnten wir mit einem Rechteck lösen, welches sich mit den
 Start- und Endpunkten mitdreht und somit immer die Breite gleich ist.
 Zur weiteren Performancesteigerung gibt es ein kleines, inneres Rechteck
 das alle Straßen enthält und ein sehr großes äußeres, welches nur Autobahnen
 enthält.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/selekts/rechteckSelektNeu.png
	display false
	width 50col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
Die Vergleiche und Formeln zum überprüfen, ob ein Punkt im Rechteckt liegt,
 sind nachfolgend aufgeführt:
\end_layout

\begin_layout Standard
\noindent
Legende: S = Start E = Ende und dessen Koordinaten y = Latitude x = Longitude
 h = Breite.
 
\end_layout

\begin_layout Standard
\noindent
In der Software ist h = 30KM d.h.
 das innere Rechteck ist 30 km breit.
 Das Autobahnrechteck ist 240 km breit.
 Wenn Sy < Ey && Sx < Ex
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/rechteck_formel_1.png

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Punkt ist im Rechteck, wenn: punktY < a(punktX) && punktY > b(punktX) &&
 punktY > c(punktX) && punktY < d(punktX).
\end_layout

\begin_layout Standard
\noindent
(2) Wenn Sy > Ey && Sx < Ex 
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/rechteck_formel_2.png

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Punkt ist im Rechteck wenn: PunktY >d(PunktX) && PunktY < c(PunktX) && punktY>
 a(punktX) && punktY<b(punktX)
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/rechteck_formel_3.png

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Punkt ist im Rechteck, wenn: punktY > a(punktX) && punktY< b(punktX)&&punktY<
 c(punktX)&&punktY > d(punktX).
 Wenn Sy < Ey&&Sx > Ex
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/rechteck_formel_4.png

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Punkt ist im Rechteck, wenn: PunktY < a(punktX) && punktY > b(punktX) &&
 punktY > c(punktX) && punktY < d(punktX)
\end_layout

\begin_layout Subsection
\noindent
Wegbeschreibung
\end_layout

\begin_layout Standard
\noindent
Um die gefundene Route auch in schriftlicher Form auszugeben, wurde die
 Klasse 
\shape italic
RouteToText
\shape default
 erstellt.
 Der 
\shape italic
Konstruktor
\shape default
 der Klasse erwartet zwei Listen.
 Dies sind erstens eine Liste mit allen besuchten Knoten (Nodes) und zweitens
 eine Liste mit den besuchten Kanten (Edges).
 Mit Hilfe der Informationen aus den Listen werden über eine SQL-Abfrage
 weitere Informationen aus der Datenbank geladen, welche in den Knoten und
 Kanten Objekten nicht vorhanden sind.
 Als weitere Informationen werden zum Beispiel die besuchten Straßennamen,
 Ortsnamen, Bundesländer etc.
 geladen.
 Beim Laden der Knoten und Kanten aus der Datenbank wurden nicht gleich
 alle Daten geladen, da ansonsten auch Informationen von Knoten und Kanten
 geladen werden würden, welche am Ende nicht auf der gefundenen Strecke
 liegen.
 Durch die kleineren Knoten und Kanten Objekte konnte eine bessere Performance
 erreicht werden.
 Aus den neuen Informationen und den bereits vorhandenen, werden durch die
 Klasse StreetDetails neue Objekte erstellt, welche jeweils die gleichen
 Informationen eines Streckenabschnitts der Route besitzen.
 Dies bedeutet, dass Kanten mit dem selben Straßennamen oder der selben
 Schnellstraßenbezeichnung gruppiert werden.
 Die gruppierten Informationen werden dann in einem Objekt gespeichert.
 Sobald alle Daten zu einer gefunden Route gesammelt wurden, gibt es eine
 Methode in der Klasse 
\shape italic
RouteToText
\shape default
, welche aus diesen Daten eine schriftliche Routenbeschreibung generiert.
 Dies geschieht durch verschachtelte IF-THEN Abfragen, welche je nach Eigenschaf
t des Streckenabschnittobjektes einen Text zur Routenbeschreibung hinzufügt
 (eine genauere Beschreibung finden Sie im nächsten Paragraphen).
\end_layout

\begin_layout Standard
\noindent
Die Klasse 
\shape italic
RouteToText
\shape default
 ist außerdem dafür verantwortlich, dass eine Statistik über die gefundene
 Strecke erstellt wird.
 Ein Kanten-Objekt besitzt die Attribute distance (beinhaltet Länge der
 Kante) und highwayType (zeigt durch eine ID wie schnell auf dieser Kante
 gefahren werden darf).
 Mit diesen Informationen kann ermittelt werden, wie weit die Distanz auf
 den einzelnen Straßentypen ist und wie lange man benötigt, um diese zu
 befahren.
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/RTT.png
	display false
	scale 80

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection*
\noindent
buildRouteInfo():
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
In dieser Methode wird durch Verwendung einiger Methoden der Klasse RoutToText.ja
va eine Beschreibung des Weges ausgegeben.
 Dabei ist es wichtig zu beachten, in welchem Straßentyp (zB.
 Highwaytype = 1) man sich befindet und auf welchen Straßentyp man als nächstes
 fährt.
 Diese Unterscheidung geschieht in mehreren IF-THEN Abfragen.
 Ein weiterer, wichtiger Punkt ist es zu unterscheiden, ob man in die nächste
 Straße abbiegt, oder nur geradeaus fährt und sich dabei der Straßenname
 lediglich ändert.
 Das Problem, dass wenn man die Autobahn verlässt und auf die gleiche wieder
 auffährt wurde mittels einer Schleife gelöst, die prüft ob sich der Name
 verändert oder nicht.
\end_layout

\begin_layout Subsection
\noindent
GUI
\end_layout

\begin_layout Subsubsection
\noindent
Vorwort
\end_layout

\begin_layout Standard
\noindent
Um unsere 
\shape italic
GUI
\shape default
 zu gestalten haben wir uns für das 
\shape italic
Google Web Toolkit
\shape default
 entschieden.
 Der wichtigste Punkt, warum wir und für diese Software entschieden haben,
 war das sie einen Java-nach-
\shape italic
Javascript
\shape default
-Compiler besitzt.
 So konnten wir die Oberfläche in Java entwickeln und das 
\shape italic
Google Web Toolkit
\shape default
 hat diesen Java Code dann nach 
\shape italic
Javascript
\shape default
 übersetzt.
\end_layout

\begin_layout Subsubsection
\noindent
Konzept
\end_layout

\begin_layout Standard
\noindent
Mit unserem ersten Entwurf haben wir uns entscheiden die 
\shape italic
GUI
\shape default
 in 3 wesentliche Teile zu unterteilen.
 Diese sind die Folgenden:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/HtwMaps_bereiche.png
	lyxscale 60
	display false
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Der blaue Bereich ist der Status- und Informationsbereich.
 Der Auswahl- und Optionsbereich befindet sich im roten Bereich.
 Der grüne Bereich ist der Kartenbereich.
\end_layout

\begin_layout Subsubsection
\noindent
Status- und Informationsbereich
\end_layout

\begin_layout Standard
\noindent
Im Status und Informationsbereich befindet sich neben unserem Logo der Statusber
eich.
 Dieser informiert den Benutzer, welchen Zustand das Programm gerade hat.
 Dieser zeigt bei Programmstart den Status “Bereit”.
 Weitere Zustände sind: 
\end_layout

\begin_layout Itemize
\noindent
“Berechne Route” : Dieser Zustand wird angezeigt, sobald der Benutzer auf
 den “Route berechnen” Button drückt 
\end_layout

\begin_layout Itemize
\noindent
“Ihre Route wurde berechnet.”, wenn eine Route gefunden wurde
\end_layout

\begin_layout Standard
\noindent
Dazu gibt es noch weitere verschiedene Fehlermeldungen, die in roter Schrift
 erscheinen und den Fehler genau deklarieren.
 Beispiele dazu sind:
\end_layout

\begin_layout Itemize
\noindent
“Leeres Ortsfeld: 1” diese Fehlermeldung sagt aus, dass das Ortsfeld in
 der 1.
 Zeile keinen Text enthält.
 
\end_layout

\begin_layout Itemize
\noindent
“Leeres Straßenfeld: 1” diese Fehlermeldung sagt aus, dass das Straßenfeld
 in der 1.
 Zeile keinen Text enthält.
 
\end_layout

\begin_layout Itemize
\noindent
“Falsche Angaben in Zeile: 2” bedeutet, dass keine sinnvollen Angaben in
 einem der beiden Feldern vorhanden ist.
 Diese trifft zu, wenn zum Beispiel Zahlen eingegeben wurden oder die Straße
 nicht in der Datenbank vorhanden ist wegen der Ungenauigkeit der Daten.
\end_layout

\begin_layout Standard
\noindent
Am rechten Rand befinden sich dann noch zwei Hyperlinks.
 Zum einen “Über” und zum anderen “Berechnungsinformationen”.
 Beide Links erzeugen ein 
\shape italic
Popup
\shape default
 in der Mitte des Browsers.
\end_layout

\begin_layout Subsubsection
\noindent
Über
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/ueber.PNG
	lyxscale 70
	display false
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Hier werden allgemeine Informationen zum Projekt bereitgestellt, dazu zählen
 die aktuelle Programmversion und die Projektteilnehmer.
\end_layout

\begin_layout Subsubsection
\noindent
Berechnungsinformationen
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/berechnungsinfos.PNG
	display false
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Hier werden nach einer erfolgreichen Berechnung, Informationen zur Routenplanung
 dargestellt.
 Unter anderem wie viele Knoten der Algorithmus zu Berechnung aus der Datenbank
 selektiert oder wie lange die Berechnung insgesamt gedauert hat.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Auswahl- und Optionsbereich
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/Optionsbereich.PNG
	display false
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Im oberen Bereich kann der Benutzer seine Start- und Zieldaten eingeben.
 Die Ort- und Straßenfelder besitzen eine 
\shape italic
Autofill
\shape default
- Funktion.
 Diese sucht nach Eingabe der ersten Buchstaben in der Datenbank nach gleichen
 Orten oder Straßen die mit diesen Buchstaben beginnen.
 So dass ein Auswahlbox erscheint, in der der 
\shape italic
Benutzer
\shape default
 dann den Ort oder Straße nur noch auswählen muss.
 
\end_layout

\begin_layout Standard
\noindent
Neben jedem Ort- und Straßenfeld befindet sich ein Button mit einem “+”
 Zeichen.
 Mit diesem Button kann der 
\shape italic
Client
\shape default
 ein neues Zwischenziel hinzufügen.
 Diese wird dann ein Zeile darunter eingefügt.
 Es ist möglich, so viele Zwischenziele wie man möchte, hinzuzufügen.
 Wenn mehr als 2 Orts- und Straßenfelder vorhanden sind, erscheint dazu
 hinter dem “+” Button noch ein zweiter Button mit einem “-” Zeichen.
 Mit diesem kann man die momentane Zeile wieder löschen.
 Darunter ist der “Route berechnen” Button.
 Beim drücken dieses Buttons werden die eingegebenen Informationen an den
 Server geschickt und versucht zu diesen Eingaben eine Route zu finden.
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Anschließend folgen drei Hyperlinks.
 Diese sind “Optionen”, “Zusammenfassung” und “Wegbeschreibung”.
 Beim drücken dieser Hyperlinks öffnet sich darunter ein Feld, in dem man
 Optionen angeben kann oder die Zusammenfassung dargestellt wird.
\end_layout

\begin_layout Subsubsection
\noindent
Optionen
\end_layout

\begin_layout Standard
\noindent
Hier kann man zunächst die Routenart festlegen.
 Man kann zwischen der “schnellsten” und “kürzesten” Route wählen.
 Standardmäßig ist die “schnellste” ausgewählt.
 Darunter kann der Benutzer seine Geschwindigkeit eintragen mit der er die
 verschieden Straßenabschnitte befahren möchte.
 Mit dieser Information wird die Zeitangabe, wie lange er für die Route
 benötigt, dann genau auf seine Fahrverhalten abgestimmt.
 Im folgenden kann er noch zwischen den zwei implementierten Algorithmen
 wählen.
 Zum einen “
\shape italic
A*
\shape default
” oder zum anderen “
\shape italic
A*
\shape default
 Bideriktional”.
 Standardmäßig ist “
\shape italic
A*
\shape default
” eingestellt.
\end_layout

\begin_layout Subsubsection
\noindent
Zusammenfassung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Hier wird nach einer erfolgreichen Berechnung Angaben zu der Route gemacht.
 
\end_layout

\begin_layout Itemize
\noindent
“Gesamt” zeigt die zu fahrenden km und die benötigte Zeit der gesamten Route
 
\end_layout

\begin_layout Itemize
\noindent
“Autobahn” zeigt nur die zu fahrenden km und die benötigte Zeit die der
 Benutzer auf der Autobahn verbringt 
\end_layout

\begin_layout Itemize
\noindent
“Landstraße” zeigt nur die zu fahrenden km und die benötigte Zeit die der
 Benutzer auf der Landstraße verbringt 
\end_layout

\begin_layout Itemize
\noindent
“Innerorts” zeigt nur die zu fahrenden km und die benötigte Zeit die der
 Benutzer innerhalb eines Ortes verbringt
\end_layout

\begin_layout Subsubsection
\noindent
Wegbeschreibung
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
Hier wird die textuelle Ausgabe der Route dargestellt.
\end_layout

\begin_layout Subsubsection
\noindent
Kartenbereich
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename Images/map.PNG
	lyxscale 80
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent
In diesem Bereich wird die Karte angezeigt.
 Sie wird mit Hilfe von mapstraction.com dargestellt, die eine eigene API
 für die Einbindung von verschieden Karten bereitstellen.
 Bei Programmstart sieht man zunächst ganz Deutschland.
 Nach einer erfolgreichen Berechnung wird die Karte auf die Route verkleinert,
 so dass Start- und Zielpunkt zu sehen sind.
 Start- und Zielpunkt werden zusätzlich mit einem Marker hervorgehoben und
 die Strecke wird mit einer roten Linie gekennzeichnet.
\end_layout

\begin_layout Subsection
\noindent
Sonstige Klassen
\end_layout

\begin_layout Subsubsection
\noindent
Datenbank Connector
\end_layout

\begin_layout Standard
\noindent
Der Datenbank Connector stellt über die JDBC Schnittstelle eine Verbindung
 zum MySQL-Server her.
 Dazu ist es notwenig einen JDBC-Treiber, in diesem Fall einen speziellen
 Java-MySQL-Connector in das Projekt einzubinden.
 Ursprünglich war der Datenbank Connector als 
\shape italic
Singleton
\shape default
 realisiert, da es logisch erschien immer nur eine Verbindung zum Datenbankserve
r herstellen zu können.
 Dies musste jedoch später verworfen werden, da sich herausstellte, dass
 dies zu einer ständig offenen Verbindung zum MySQL Server und diese offene
 Verbindung wiederum zu Speicherlecks führte.
 Der Connector liest seine Verbindungsdaten mittels der Porperty-Klasse
 aus einer Konfigurationsdatei aus.
\end_layout

\begin_layout Subsubsection
\noindent
Property-Klasse
\end_layout

\begin_layout Standard
\noindent
Mit Hilfe einer 
\shape italic
Property-Klasse
\shape default
 ist es in Java sehr simpel aus einer einfachen Text-Datei Werte auszulesen.
 Hier geht man in der Text-Datei ähnlich vor wie bei der Variablen-Zuweisung.
 Diese Werte können dann über das Property-Objekt in Java verwendet werden.
 Die 
\shape italic
Property-Klasse
\shape default
 wurde bei uns durch ein 
\shape italic
Singleton
\shape default
 Muster implementiert, da wir nur ein Property-File haben und mehrere Klassen
 das selbe Objekt verwenden können.
 In der Property-Datei wurden die Zugangsdaten zum SQL-Server abgelegt.
 Ein Eintrag in der Git-Ignore Datei hat dann dafür gesorgt, dass die Datei
 mit den SQL Zugangsdaten nicht auf unser öffentliches 
\shape italic
Repository
\shape default
 geladen wird.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\noindent
Qualitätsmanagement
\end_layout

\begin_layout Standard
\noindent
Um die Qualität unserer Software sicher zu stellen bzw.
 zu erhalten, haben wir uns schon recht früh dazu entschieden unser Programm
 kontinuierlich zu testen.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset

Da ein Mitglied unseres Teams in der Entwicklung und im Qualitätsmanagement
 einer Saarbrücker Firma tätig ist, wurde er als Qualitätsverantwortlicher
 für HTWmaps ausgewählt.
 Neben dem Testen des Programms, umfasste sein Tätigkeitsbereich auch das
 Erstellen eines Testplans.
 Mit Hilfe eines solchen Testplans hat man zu jeder Zeit einen genauen Überblick
 welche Funkionalitäten der aktuellen Version schon getestet wurden.
 Jede Version wurde mit Hilfe des Testplans getestet.
 Dieser wurde dynamisch an die neu hinzugekommenen Features angepasst.
 Er ist als Anhang in dieser Dokumentation zu finden.
 
\end_layout

\begin_layout Standard
\noindent
Die Fehler bzw.
 
\shape italic
Bug
\shape default
s, die während der Testphase entdeckt wurden, wurden auf der Webseite unseres
 Projekthosters Github.com eingetragen.
 Wir haben diese Vorgehensweise ausgewählt, da bei jedem neu eingetragenen
 
\shape italic
Bug
\shape default
, der 
\shape italic
Issue-Tracker
\shape default
 des Projekthosters automatisch eine Email an den Verantwortlichen sendet.
 Dadurch wird gewährleistet, dass der Verantwortliche so schnell wie möglich
 mit der Beseitigung des Fehlers beginnen kann.
\end_layout

\begin_layout Section
\noindent
Fazit
\end_layout

\begin_layout Standard
\noindent
Als Fazit ist zu sagen, dass wir das Projekt als erfolgreich abgeschlossen
 betrachten.
 Es war uns in der gegeben Zeit möglich alle Funktionen aus dem Lastenheft
 zu implementieren.
 
\end_layout

\begin_layout Standard
\noindent
Leider konnten wir die von uns festgelegte Zeit von 3 Sekunden für das berechnen
 einer Route, die wir im Lastenheft angegeben hatten, nicht immer einhalten.
 Der Grund hierfür ist, dass wir uns schon zu Beginn an Werten großer Unternehme
n wie z.B.
 Google Maps gerichtet haben.
 Zu dieser Zeit war uns jedoch nicht bewusst, wie wir diese Zeitwerte realisiere
n würden.
 Da wir aber sehr viel Zeit für die Perfomance investierten, haben wir es
 doch noch geschafft, uns den 3 Sekunden anzunähern.
\end_layout

\begin_layout Standard
\noindent
Im Abschlussgespräch stellte sich heraus, dass allen Teilnehmern das Arbeiten
 am Projekt spaß gemacht und jeder sehr viel gelernt hat.
\end_layout

\begin_layout Section
\noindent
Glossar
\end_layout

\begin_layout Description
\noindent
A 
\series bold
Stern (A*):
\series default
 Suchalgorithmus.
 Er dient in der Informatik der Berechnung eines kürzesten Pfades zwischen
 zwei Knoten in einem Graphen mit positiven Kantengewichten
\end_layout

\begin_layout Description
\noindent
Autofill: Funktion: Nach Eingabe der ersten Buchstaben in einem Suchfeld,
 wird in der Datenbank nach gleichen Orten oder Straßen die mit diesen Buchstabe
n beginnen gesucht.
\end_layout

\begin_layout Description
\noindent
Bidirektional: Es wird ein möglichst mittlerer Punkt innerhalb der Sart-Ziel
 Strecke gewählt.
 Dieser Punkt wird geichzeitig vom Zielpunkt und vom Startpunkt geroutet.
\end_layout

\begin_layout Description
\noindent
Branch: Dient zur Entwicklung von Programmen in unterschiedlichen Entwicklungszw
eigen (engl.
 Branches) eines Projektes.
\end_layout

\begin_layout Description
\noindent
Bug: Programm- oder Softwarefehler, das allgemeinen ein Fehlverhalten von
 Computerprogrammen bezeichnet.
\end_layout

\begin_layout Description
\noindent
Client: Ein Client ist ein Computerprogramm, das Kontakt zu einem anderen
 Computerprogramm, dem Server, aufnimmt, um dessen Dienstleistung zu nutzen.
\end_layout

\begin_layout Description
\noindent
Code 
\series bold
& Fix:
\series default
 
\shape italic
Vorgehensmodell
\shape default
 der Softwareentwicklung, bei der sehr schnell angefangen wird zu programmieren
 (ohne Gedanken über das Design bzw Programmierstil).
 Nach einer bestimmten Zeit wird getestet und evtl.
 Verbesserungen vorgenommen
\end_layout

\begin_layout Description
\noindent
Dijkstra: dient der Berechnung eines kürzesten Pfades zwischen einem Startknoten
 und einem oder mehreren beliebigen Knoten in einem kantengewichteten Graphen.
\end_layout

\begin_layout Description
\noindent
ER-Diagramm: Die grafische Darstellung von Entitätstypen und Beziehungstypen
 wird Entity-Relationship-Diagramm oder ER-Diagramm genannt.
\end_layout

\begin_layout Description
\noindent
Framework: Ein Framework ist ein Programmiergerüst, das in der Softwaretechnik,
 insbesondere im Rahmen der objektorientierten Softwareentwicklung sowie
 bei komponentenbasierten Entwicklungsansätzen, verwendet wird.
\end_layout

\begin_layout Description
\noindent
GitHub: GitHub ist ein Hosting-Dienst für webbasierte Projekte, welche das
 Git-Versionsverwaltungs-System verwenden.
\end_layout

\begin_layout Description
\noindent
Graphical 
\series bold
User Interface (GUI):
\series default
 Software-Komponente, die dem Benutzer eines Computers die Interaktion mit
 der Maschine über grafische Symbole erlaubt.
\end_layout

\begin_layout Description
\noindent
Google
\series bold
 Web Toolkit (GWT):
\series default
 Das Google Web Toolkit ist ein Framework zur Entwicklung von Webanwendungen.
\end_layout

\begin_layout Description
\noindent
Issue-Tracker: ist eine Art von Software, um Empfang, Bestätigung, Klassifizieru
ng und Bearbeitung von Kundenanfragen (Tickets bzw.
 Fälle) zu handhaben.
 Als Anfragen werden eingehende Kundenanrufe, E-Mails, Faxe und ähnliches
 betrachtet.
\end_layout

\begin_layout Description
\noindent
Javascript: JavaScript ist eine Skriptsprache, die hauptsächlich in Web-Browsern
 eingesetzt wird.
\end_layout

\begin_layout Description
\noindent
Konstruktor: Prozeduren bzw.
 Methoden, die beim Erzeugen von Objekten und Variablen aufgerufen werden.
\end_layout

\begin_layout Description
\noindent
Lastenheft: Das Lastenheftbeschreibt dieGesamtheit der Forderungen des Auftragge
bers an die Lieferungen und Leistungen eines Auftragnehmers
\end_layout

\begin_layout Description
\noindent
OpenStreetMap: OpenStreetMap (abgekürzt OSM) ist ein Open-Source-Projekt
 mit dem Ziel, ein für jeden freiverfügbares weltweites Geodaten-Material,
 z.B.
 Karten oder Routing-Dienste, in elektronischer Form zu schaffen.
\end_layout

\begin_layout Description
\noindent
Popup: Visuelles Element eines Computerprogramms, das in manchen Situationen
 aufspringt und dabei andere Teile überdeckt.
\end_layout

\begin_layout Description
\noindent
Property-Klasse: Klasse in Java, um sehr einfach Werte aus Text Dateien
 zu lesen.
\end_layout

\begin_layout Description
\noindent
Repository: Verwaltetes Verzeichnis zur Speicherung und Beschreibung von
 digitalen Objekten.
 Bei den verwalteten Objekten kann es sich beispielsweise um Programme (Software
-Repository) handeln.
\end_layout

\begin_layout Description
\noindent
Rendern: Der Begriff Rendern bezeichnet die Erstellung einer Grafik aus
 einer Skizze oder einem Modell.
\end_layout

\begin_layout Description
\noindent
Routenplaner: Computerprogramme, mit deren Hilfe ein Weg zwischen einem
 Start- und einem Zielort gefunden werden kann
\end_layout

\begin_layout Description
\noindent
RouteToText: Methode um die gefundene Route in schriftlicher Form auszugeben.
\end_layout

\begin_layout Description
\noindent
Routingalgorithmus: Algorithmus.
 um von einem Startpunkt zu einem Zielpunkt zu gelangen.
\end_layout

\begin_layout Description
\noindent
Scrum: 
\shape italic
Vorgehensmodell
\shape default
 der agilen Softwareentwicklung.
\end_layout

\begin_layout Description
\noindent
Singleton: Das Singleton ist ein in der Softwareentwicklung eingesetztes
 Entwurfsmuster und gehört zur Kategorie der Erzeugungsmuster.
 Es verhindert, dass von einer Klasse mehr als ein Objekt erzeugt werden
 kann.
\end_layout

\begin_layout Description
\noindent
SourceForge: SourceForge ist ein Repository in Form einer Website, welche
 Programmierern die Möglichkeit bietet, quelloffene Softwareprojekte zu
 erstellen und zu verwalten.
\end_layout

\begin_layout Description
\noindent
Tag: Geodaten, die mit Informationen versehen wurden um zB.
 aus Ihnen automatische Karten zu generien.
 (Bsp: highway=motorway).
\end_layout

\begin_layout Description
\noindent
Unified 
\series bold
Modeling Language (UML):
\series default
 Graphische Modellierungssprache zur Spezifikation, Konstruktion und Dokumentati
on von Teilen von Software und anderen Systemen
\end_layout

\begin_layout Description
\noindent
Vorgehensmodell: dient dazu, die Softwareentwicklung übersichtlicher zu
 gestalten und in der Komplexität beherrschbar zu machen.
\end_layout

\begin_layout Description
\noindent
Wasserfallmodell: Das Wasserfallmodell ist ein lineares (nicht-iteratives)
 
\shape italic
Vorgehensmodell
\shape default
 in der Softwareentwicklung, bei dem der Softwareentwicklungsprozess in
 Phasen organisiert wird.
 Dabei gehen die Phasenergebnisse wie bei einem Wasserfall immer als bindende
 Vorgaben für die nächst tiefere Phase ein.
\end_layout

\begin_layout Section
\noindent
Quellenangabe
\end_layout

\begin_layout Standard
\noindent
Die Formulierungen des Glossars wurden Teilweise aus Wikipedia (www.wikipedia.de)
 kopiert.
\end_layout

\begin_layout Section
\noindent
Anhang
\end_layout

\begin_layout Itemize
\noindent
Lastenheft
\end_layout

\begin_layout Itemize
\noindent
Testplan
\end_layout

\begin_layout Itemize
\noindent
Nachweis des Zeitaufwandes
\end_layout

\end_body
\end_document
