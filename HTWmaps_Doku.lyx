#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Projektübersicht
\end_layout

\begin_layout Subsection
Einleitung
\end_layout

\begin_layout Subsubsection
Vorwort
\end_layout

\begin_layout Standard
Im Rahmen des 4.
 Semesters war es Aufgabe ein Projekt, über die Dauer des Semesters, anzufertige
n.
 Diese Dokumentation umfasst folgendes Thema: 
\end_layout

\begin_layout Standard
Erstellen Sie einen Routenplaner mit Hilfe des Kartenmaterials von OpenStreetMap.
 Die zu entwickelnde Software soll das Planen von Routen innerhalb Deutschlands
 ermöglichen.
\end_layout

\begin_layout Standard
Als Projektnamen haben wir den Namen „HTWmaps“ gewählt.
\end_layout

\begin_layout Subsubsection
Das Projektteam
\end_layout

\begin_layout Standard
Das Projektteam, unter der Betreuung von Prof.
 Dr.
 Thomas Kretschmer, umfasste 8 Mitglieder mit verschiedenen Zuständigkeiten.
 Die folgende Liste zeigt die Mitarbeiter, die am Projekt teilgenommen haben:
\end_layout

\begin_layout Itemize
Altmeyer, Thomas 
\end_layout

\begin_layout Itemize
Bartsch, Tim 
\end_layout

\begin_layout Itemize
Klos, Yassir 
\end_layout

\begin_layout Itemize
Lana, Tobias 
\end_layout

\begin_layout Itemize
Rech, Christian 
\end_layout

\begin_layout Itemize
Schneider, Lucian 
\end_layout

\begin_layout Itemize
Tartakowski, Stanislaw 
\end_layout

\begin_layout Itemize
Gökayya, Volkan
\end_layout

\begin_layout Standard
Das Projekt wurde von Christian Rech geleitet.
 
\end_layout

\begin_layout Subsubsection
Zielsetzung
\end_layout

\begin_layout Standard
Ziel des Projektes war die Fertigstellung der Software bis zum 30.
 September 2010.
 Der Prototyp sollte bis dahin den im Lastenheft definierten Funktionsumfang
 besitzen.
 Außerdem sollte eine umfassende Dokumentation des Projektes er- stellt
 werden, welche ebenfalls bis zum 30.
 September 2010 vervollständigt und abgegeben sein sollte.
 
\end_layout

\begin_layout Subsubsection
Zielgruppe
\end_layout

\begin_layout Standard
HTWmaps gleicht im Aufbau anderen Online-Routenplanern.
 Es wurde versucht (soweit technisch und zeitlich möglich) die besten Funktionen
 dieser Routenplaner (z.B.
 
\color red
GOOGLEmaps, Falk24,.....
\color black
) in HTWmaps einzubauen.
 Zielgruppe ist deswegen die selbe wie andere Routenplaner haben.
 Diese sind größtenteils Autofahrer.
\end_layout

\begin_layout Subsection
Vorgehenweise
\end_layout

\begin_layout Subsubsection
Vorgehensmodell Scrum (oder Code & Fix)
\end_layout

\begin_layout Standard
Die Projektgruppe hat sich für das agile Vorgehensmodell Scrum entschieden.
 Scrum beruht auf dem Prinzip, dass die Teammitglieder sich weitgehend selbst
 organisieren und das stetig darüber bestimmt wird, ob Funktionen wichtig
 sind und implementiert werden, oder ob es wichtigere Funktionen gibt, auf
 welche man sich konzentriert.
 Die Projektteilnehmer hielten jede Woche Meetings, in denen neue Erkenntnisse
 berichtet wurden und zusammen weitergearbeitet wurde.
 Hierdurch konnte der noch zu erbringende Arbeitsaufwand abgeschätzt werden.
 Weiterhin haben sich die Projektteilnehmer auch außerhalb der regelmäßigen
 Meetings getroffen um zusammen aktuelle Schwierigkeiten zu besprechen.
 
\end_layout

\begin_layout Standard
Andere Modelle, wie beispielsweise das Wasserfallmodell, erschienen zu unexibel
 für die Aufgabenstellung.
 Obwohl das Projekt von Anfang bis Ende geplant wurde und das Vorgehen festgeleg
t wurde, stellte sich häufiger herraus, dass (meist aus Performanz Gründen)
 das Vorgehen verändert werden musste.
 Dies traf größtenteils den Datenbankbereich, wodurch dann auch andere Teile
 überarbeitet werden musste.
 Dies glich dann dem Vorgehensmodell Code & Fix.
 
\end_layout

\begin_layout Subsubsection
Gruppeneinteilung
\end_layout

\begin_layout Standard
Das finden von Modulen und deren Abgrenzung auf abstrakter Ebene hat auf
 Anhieb funktioniert.
 Zu Beginn wurde geklärt welche Aufgaben grob vollzogen werden müssten.
 Hier wurden kleine Arbeitsgruppen gebildet.
 Die Gruppeneinteilung war jedoch keine leichte Aufgabe.
 Problematisch war, dass bis dato keiner der Teilnehmer den Realisierungsaufwand
 der einzelnen Module abschätzen konnte.
 Man hat folglich darauf verzichtet Verantwortungsbereiche klar voneinander
 zu trennen.
 Jedoch haben sich über die Projektphase hinweg Gruppen herauskristallisiert,
 da einige ein besonders großes Maß an Arbeit in ihre Aufgabe investierten
 und dementsprechend sich in ihrem Bereich sicherer fühlten, als in anderen
 Bereichen.
 Im Gesamtblick gab es diese Gruppen: 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bereich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Personen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Algorithmen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Volkan Goekayya, Lucian Schneider, Christian Rech
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datenbanken
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yassir Klos, Tobias Lana
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thomas Altmeyer, Tim Bartsch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Routingalgorithmen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stanislav Tartakowski, Tim Bartsch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Serververwaltung
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Christian Rech, Lucian Schneider
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Die Tabelle zeigt nur Tätigkeit die sich über einen längeren Zeitraum erstreckte
n.
 Jedes Teammitglied hat sich auch kurzfristig um andere Aufgaben gekümmert.
\end_layout

\begin_layout Subsection
Produktumfang
\end_layout

\begin_layout Subsubsection
Zielgruppe
\end_layout

\begin_layout Standard
........
\end_layout

\begin_layout Standard
Da es bereits einige Routenplaner gibt konnte sich jeder Projektteilnehmer
 sehr gut vorstellen, was in dem Projekt verlangt wurde.
 So kam es auch dazu, dass wir unser Programm mit anderen Routenplanern
 verglichen haben.
 Da die am meisten genutzen Routenplaner vom Internet aus zu bedienen sind,
 haben wir uns dies auch als Ziel gesetzt.
\end_layout

\begin_layout Section
Allgemeines
\end_layout

\begin_layout Subsection
Vorbereitende Tätigkeiten
\end_layout

\begin_layout Subsubsection
Git
\end_layout

\begin_layout Subsubsection
GWT
\end_layout

\begin_layout Subsubsection
Server
\end_layout

\begin_layout Subsection
Unvollständigkeit der Daten
\end_layout

\begin_layout Standard
Die Daten bei Openstreet Maps sind derzeit noch unvollständig.
 So sind manchmal Wege und Straßen nicht verzeichnet, oder besitzen ungültige
 Namen, wie beispielsweise „unbekannt“.
 Auswirkung der Unvollständigkeit auf den Routenplaner haben folge Dinge
 Viele Straßen sind nicht verzeichnet, oder besitzen ungültige Namen Postleitzah
len und Hausnummern sind fast nirgendwo erfasst Straßen sind fast nie mit
 einem Ort gekennzeichnet in dem sie liegen Häufige Rechtschreibfehler der
 Orte/Straßen Manche Orte hab keine Straßennamen Orte sind sehr selten klar
 voneinander getrennt (Keine Grenzen) Viele Orte, vor allem Dörfer sind
 vom falschen Typ (Hamlet, Village).
 So variiert die Größe eines Dorfes sehr stark, jedoch haben viele Dörfer
 unterschiedlicher Größe im Kartenmaterial die gleiche Beschreibung.
 Ein kleines Dorf muss als „Hamlet“ beschrieben werden, ab ca.
 2km Durchmesser schon „Village“ Es gibt Orte zu denen keine Straße führt.
 Der Algorithmus versagt an dieser Stelle.
 Vor allem sind Straßen problematisch, die keinem Ort zugeordnet wurden.
 Der Benutzer muss in der Lage sein, eine Straße und einen Ort anzugeben,
 um dem Programm mitzuteilen, wohin und von wo er routen will.
 Dieses Problem wurde von uns nur teilweise gelöst.
 Um jeden Ort, abhängig vom Typ, wie Dorf, Stadt, etc., wurde jeweils ein
 Kreis bestimmten Radius gezogen, der alle beinhalteten Straßen mit dem
 jeweiligen Ort kennzeichnet.
 Manche Orte sind jedoch exakt vermerkt, sodass man jede Straße mit einem
 anderen Verfahren („Punkt in Polygon“) kennzeichnen konnte.
 Allerdings sind solche exakt verzeichnete Orte selten.
 
\end_layout

\begin_layout Standard
Letztlich gibt es über den Datenbestand in der Datenbank folgendes zu sagen:
 
\end_layout

\begin_layout Itemize
Es sind nicht alle Straßen mit einem Kreis erfasst 
\end_layout

\begin_layout Itemize
Es gibt „Übergriffe“ der Kreise auf benachbarte Orte, sodass dann Straßen
 zum falschen Ort zugeteilt werden 
\end_layout

\begin_layout Itemize
Straßen in Orten, die als solche exakt gekennzeichnet sind (Polygone), sind
 alle vermerkt.
 
\end_layout

\begin_layout Standard
Anzahl der Daten, die effektiv der Datenbank entnommen werden können.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bereich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anzahl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Städte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43545
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Straßen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1251450
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Gesamtes UML
\end_layout

\begin_layout Subsubsection
Vorwort
\end_layout

\begin_layout Subsubsection
Klassen und Pakete
\end_layout

\begin_layout Subsubsection
Klassen untereinander
\end_layout

\begin_layout Section
Lastenheft
\end_layout

\begin_layout Standard
Das Lastenheft mit den unterstützten Funktionen & Anforderungen finden Sie
 im Anhang
\end_layout

\begin_layout Section
Technische Dokumentation
\end_layout

\begin_layout Subsection
Vorwort
\end_layout

\begin_layout Standard
Die folgende Dokumentation erläutert den Aufbau von HTWmaps.
 Sie geht auf das zu Grunde liegende Konzept, die Implementierung und den
 Aufbau der Datenbank ein.
 
\end_layout

\begin_layout Subsection
Allgemeiner Programmablauf
\end_layout

\begin_layout Standard
Der Benutzer interagiert mit der Software über einen Javaskript-fähigen
 Internetbrowser.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Images/Ablauf_alg.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Subsection
Datenbank
\end_layout

\begin_layout Subsubsection
Vorwort
\end_layout

\begin_layout Subsubsection
Konzept
\end_layout

\begin_layout Subsubsection
Datenbankschema
\end_layout

\begin_layout Paragraph
Technisches: 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Datenbanksoftware: MySQL 
\end_layout

\begin_layout Standard
Version: 5.1.41 
\end_layout

\begin_layout Standard
Betriebssystem: Ubuntu Server Version: 10.04 
\end_layout

\begin_layout Standard
Server: stud-i-pr2.htw-saarland.de 
\end_layout

\begin_layout Standard
Standort: Virtuelle Maschine auf dem Server der Fachschaft Informatik  
 
\end_layout

\begin_layout Standard
Hardware / Ressourcen: 2x2,8GHz; 2GB Ram; 20GB Festplatte 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
In der ersten Version des Datenbankschemas ging man davon aus, dass zum
 Rendern der Route alle Daten aus der Quelldatei benötigt würden.
 Dazu gehörten auch die Daten die nichts mit der direkten Routenplanung
 zu tun haben, z.B.
 Umrisse von Wäldern, Flüsse, Bundeslandgrenzen, etc.
 Daher wurden in den ersten Versionen alle Daten aus der Quelldatei in die
 Datenbank übernommen.
 
\end_layout

\begin_layout Standard
In den ersten Versionen lag die Priorität des Datenbankentwurfs auf dem
 Layout, bzw.
 auf der Normalisierung der Datenbank.
 Mit Umstieg von Saarland -> Deutschland wurde jedoch schnell klar, dass
 die Performance sehr stark unter dem normalisierten Datenbankentwurf leidet.
 
\end_layout

\begin_layout Paragraph
Ein neuer Ansatz brachte zwei wichtige Änderungen:
\end_layout

\begin_layout Enumerate
das Rendern der Karte wird an eine externe Lösung abgegeben.
 Das heißt das nur noch die zum Routen relevanten Daten in die Datenbank
 gespeichert werden 
\end_layout

\begin_layout Enumerate
Performance hat höhere Priorität als Normalisierung.
 Als Folge wurden Redundanzen in Kauf genommen, da dadurch viel Zeit, durch
 entfallene JOINS, eingespart werden konnte.
 
\end_layout

\begin_layout Standard
Die Versionen 0.1 - 0.3 wurden ausschließlich auf Grundlage der Kartendaten
 des Saarlandes entwickelt und gefüllt.
 Erst ab Version 0.4 wurde ganz Deutschland berücksichtigt.
 
\end_layout

\begin_layout Subsubsection
Finales Datenbankschema (1.0)
\end_layout

\begin_layout Standard
Ein ER-Diagramm erweist sich hier als wenig sinnvoll, da fast jede Tabelle
 mit jeder anderen aufgrund von Redundanz in Verbindung gebracht werden
 kann.
 Ausserdem sind JOINS und andere SQL Anfragen, die tabellenübergreifend
 sind aufgrund von Performance nicht erwünscht.
\end_layout

\begin_layout Paragraph
Übersicht über die einzelnen Tabellen
\end_layout

\begin_layout Paragraph
cities 
\end_layout

\begin_layout Subparagraph
Beschreibung (in Tabellen Form bringen)
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\color red
Inhalt beinhaltet alle “Stadtzentrum”-Knoten mit ID, Koordinaten und Name
 der Stadt Diese Tabelle dient nur dem Straßen importskrip (Updatestreets.java)
 Quelle alle Knoten aus der osm Datei die als “place” markiert sind.
 Größe 70,268 Einträge Indizes ID: Primärschlüssel
\end_layout

\begin_layout Standard

\color red
Aufbau
\end_layout

\begin_layout Standard

\color red
Feld Typ Null Standard Extra Beschreibung Wird in Folgendem Schritt gefüllt
 ID int(11) nein nein PK ID des nodes 2 lat float nein nein
\end_layout

\begin_layout Standard

\color red
lat Koordinate 2 lon float nein nein
\end_layout

\begin_layout Standard

\color red
lon Koordinate 2 name varchar(255) nein nein
\end_layout

\begin_layout Standard

\color red
Name des Nodes 2
\end_layout

\begin_layout Standard

\color red
edges_all Beschreibung
\end_layout

\begin_layout Standard

\color red
Inhalt beinhaltet alle Kanten eines Ways der als Straße markiert ist mit
 allen Informationen der beiden Knoten (je ID, lat, lon), der ID des Ways,
 Info ob Einbahnstraße ja/nein, Info über Typ der Straße, Länge der Kante
 Quelle ID ist Autoinkrement vom SQL Insert
\end_layout

\begin_layout Standard

\color red
node1ID, node2ID, wayID, isOneway, speedID kommen aus der osm Datei
\end_layout

\begin_layout Standard

\color red
lat und lon der beiden Knoten kommen via Update SQL aus der Tabelle nodes
\end_layout

\begin_layout Standard

\color red
lenght wird beim Insert mit NULL belegt und später durch die Methode CalculateEd
geLength berechnet Größe ~11,695,294 Einträge Indizes ID: Primärschlüssel
 node1lat: node1lon: node2lat: node2lon: 
\end_layout

\begin_layout Subsection
Algorithmen
\end_layout

\begin_layout Subsubsection
Vorwort
\end_layout

\begin_layout Subsubsection
Konzept
\end_layout

\begin_layout Subsubsection
Routingalgorithmus
\end_layout

\begin_layout Paragraph
A*
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Der Routenplaner läuft mit 2 auswählbaren Suchalgorithmen, A* und A* Bidirection
al, die beide unabhängig voneinander entwickelt wurden.
 Beide Algorithmen können in allen Bereichen, wo es darum geht von einem
 bekannten Anfangspunkt einen Weg zu einem bekannten Endpunkt zu finden,
 ihre Anwendung finden.
 Der A* Algorithmus entstand aus der Idee vom Dijkstra Suchalgorithmus und
 hat diesen erweitert.
 Dijkstra ist auf das Suchen des kürzesten Weges von jedem Knoten aus zum
 Startknoten konzipiert.
 Dies hat den Vorteil, dass man nicht von Vornherein wissen muss, wo sich
 das Ende befindet.
 Beispielsweise Routen durch ein Netzwerk.
 Dieses Konzept ist für den Anwendungsfall unserer Software wenig sinnvoll,
 da wir nur den kürzesten Weg zwischen Start- und Endknoten suchen.
 A* erfüllt dieses Kriterium.
 Entscheidender Unterschied zu Dijkstra ist eine ziel orientierte Heuristik.
 Diese veranlasst den Algorithmus immer den nächsten Knoten zu analysieren,
 der am nächsten zum aktuellen Knoten und zum Ziel liegt.
 Trotz dieser Erweiterung bleibt der mathematische Korrektheitsbeweis analog
 zum Dijkstra.
 Ein Weg A* zu optimieren ist ein sogenanntes „Bidirektionales Verfahren“.
 Der bidirektionale A* entspricht dem klassischen A*, bis auf die Tatsache,
 dass hier der klassische A* gleichzeitig von Start nach Ende, sowie von
 Ende nach Start sucht.
 Dort, wo sich die beiden Verfahren zum ersten Mal treffen, ist die Schnittstell
e zum gefundenen Weg.
 Dieses Verfahren beschleunigt die Suche und ist von der Theorie her korrekt.
\end_layout

\begin_layout Standard

\color red
[Momentaufnahme]
\end_layout

\begin_layout Subsubsection
Wegbeschreibung
\end_layout

\begin_layout Standard
Um die gefundene Route auch in schriftlicher Form auszugeben, wurde die
 Klasse RouteToText erstellt.
 Der Konstruktor der Klasse erwartet zwei Listen.
 Dies sind erstens eine Liste mit allen besuchten Knoten (Nodes) und zweitens
 eine Liste mit den besuchten Kanten (Edges).
 Mithilfe der Informationen aus den Listen werden über eine SQL-Abfrage
 weitere Informationen aus der Datenbank geladen, welche in den Nodes und
 Edges Objekten nicht vorhanden sind.
 Als weitere Informationen werden zum Beispiel die besuchten Straßennamen,
 Ortsnamen, Bundesländer usw.
 geladen.
 Beim Laden der Nodes und Edges Daten aus der Datenbank wurden nicht gleich
 alle Daten geladen, da ansonsten auch Informationen von Nodes und Edges
 geladen werden würden, welche am Ende nicht auf der gefundenen Strecke
 liegen.
 Durch die kleineren Nodes und Edges Objekte konnte eine bessere Performance
 erreicht werden.
 Aus den neuen Informationen und den bereits vorhandenen, werden durch die
 Klasse StreetDetails neue Objekte erstellt, welche jeweils die gleichen
 Informationen eines Streckenabschnitts der Route besitzen.
 Dies bedeutet, dass Edges mit dem selben Straßennamen oder der selben Schnellst
raßenbezeichnung gruppiert werden.
 Die gruppierten Informationen werden dann in einem Objekt gespeichert.
 Sobald alle Daten zu einer gefunden Route gesammelt wurden, gibt es eine
 Methode in der Klasse RouteToText, welche aus diesen Daten eine schriftliche
 Routenbeschreibung generiert.
 Dies geschieht durch verschachtelte if-then Abfragen, welche je nach Eigenschaf
t des Streckenabschnittobjektes einen Text zur Routenbeschreibung hinzufügt.
\end_layout

\begin_layout Standard
Die Klasse RouteToText ist außerdem dafür verantwortlich, dass eine Statistik
 über die gefundene Strecke erstellt wird.
 Ein Edge-Objekt besitzt die Attribute distance (beinhaltet Länge der Kante)
 und highwayType (zeigt durch eine ID wie schnell auf dieser Kante gefahren
 werden darf).
 Mit diesen Informationen kann ermittelt werden, wie weit die Distanz auf
 den einzelnen Straßentypen ist und wie lange man benötigt, um diese zu
 befahren.
\end_layout

\begin_layout Subsubsection
Property-Klasse
\end_layout

\begin_layout Subsection
GUI
\end_layout

\begin_layout Subsubsection
Vorwort
\end_layout

\begin_layout Subsubsection
Konzept
\end_layout

\begin_layout Section
Glossar
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Route
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
asdkopkp oijadsoij ijasoidn dfnjnoijasoid adsdnoi
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Anhang
\end_layout

\begin_layout Itemize
Lastenheft
\end_layout

\begin_layout Itemize
Testplan
\end_layout

\begin_layout Itemize
Meeting Protokolle
\end_layout

\begin_layout Itemize
Zeitnachweis
\end_layout

\end_body
\end_document
